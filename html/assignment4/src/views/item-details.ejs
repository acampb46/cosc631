<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= item.title %> - Item Details</title>
    <!-- Bootstrap CSS -->
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
          integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
          crossorigin="anonymous">

    <!-- Stripe -->
    <script src="https://js.stripe.com/v3/"></script>
</head>
<body class="bg-light">
<div class="container py-4">
    <!-- Header -->
    <header class="text-center mb-4">
        <h1 class="display-5"><%= item.title %></h1>
        <a href="/assignment4/dashboard/load" class="btn btn-secondary">Back to Dashboard</a>
    </header>

    <!-- Item Information -->
    <section class="mb-4">
        <h2>Item Information</h2>
        <div class="card">
            <div class="row g-0">
                <div class="col-md-4">
                    <% if (item.image_url) { %>
                        <img src="<%= item.image_url %>" class="img-fluid rounded-start" alt="Item Image">
                    <% } else { %>
                        <img src="./../../public/images/placeholder.png" class="img-fluid rounded-start"
                             alt="Placeholder Image">
                    <% } %>
                </div>
                <div class="col-md-8">
                    <div class="card-body">
                        <h5 class="card-title"><%= item.title %></h5>
                        <p class="card-text"><%= item.description %></p>
                        <p class="card-text"><strong>Price:</strong> $<%= item.price %></p>
                        <p class="card-text"><strong>Quantity:</strong> <%= item.quantity %></p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Bidding Section -->
    <% if (item.category === 'auction') { %>
        <section class="mb-4">
            <h2>Place a Bid</h2>
            <form id="bid-form" class="row g-3">
                <div class="col-md-6">
                    <label for="bidAmount"></label>
                    <input type="number" id="bidAmount" name="bidAmount" class="form-control"
                           placeholder="Enter your bid" required>
                </div>
                <div class="col-md-6">
                    <button type="submit" class="btn btn-primary">Place Bid</button>
                </div>
            </form>
            <p class="mt-2"><strong>Current Highest Bid:</strong> $<span id="highest-bid">Loading...</span></p>
        </section>
    <% } %>

    <!-- Purchase Section -->
    <% if (item.category === 'for sale') { %>
        <section class="mb-4">
            <h2>Buy Now</h2>
            <form id="buy-form" class="row g-3">
                <div class="col-md-6">
                    <input type="number" id="buyQuantity" name="quantity" class="form-control"
                           placeholder="Enter quantity" required>
                </div>
                <div class="col-md-6">
                    <button type="button" id="checkout-button" class="btn btn-success">Check Out</button>
                </div>
            </form>
        </section>
    <% } %>
</div>

<div id="checkout">
    <!-- Checkout will insert the payment form here -->
</div>

<footer class="text-center py-3 bg-dark text-light">
    <p>&copy; 2024 Auction Site</p>
</footer>

<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
        crossorigin="anonymous"></script>
<script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
<script>
    const itemId = "<%= item.id %>";
    const socket = io('https://gerardcosc631.com:12348', {
        withCredentials: true,
        transports: ["websocket", "polling"]
    });

    socket.on('connect', () => {
        console.log('Connected to the server via Socket.IO');
    });


    const bidForm = document.getElementById('bid-form');
    if (bidForm) {
        fetchHighestBid();
        console.log("Processing bid form.");
        bidForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const bidAmount = document.getElementById('bidAmount').value;

            try {
                const response = await fetch('/assignment4/bids/place', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({itemId, bidAmount}),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    alert(`Failed to place bid: ${errorData.message}`);
                } else {
                    alert('Bid placed successfully!');
                }
            } catch (error) {
                console.error('Network or server error:', error);
                alert('There was an error processing your bid. Please try again.');
            }
        });
    }

    const buyForm = document.getElementById('buy-form');
    if (buyForm) {
        console.log("Processing buy form.");
        buyForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const quantity = document.getElementById('buyQuantity').value;

            const response = await fetch('/assignment4/purchase/buy', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({itemId, quantity}),
            });

            if (response.ok) {
                // After the transaction is created, call createPayment function
                console.log("Transaction successfully created.");
                const data = await response.json();
                if (data.transactionId) {
                    console.log("Loading Payment Creation...");
                    await checkout(data.amount, itemId, data.transactionId, quantity); // Trigger checkout session creation
                }
            } else {
                const errorData = await response.json();
                alert(`Failed to purchase item: ${errorData.message}`);
            }
        });
    }

    async function checkout(amount, itemId, transactionId, quantity) {
        const response = await fetch('/create-checkout-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                amount: amount,
                itemId: itemId,
                transactionId: transactionId,
                quantity: quantity,
            }),
        });

        const { sessionId } = await response.json();

        const { error } = await stripe.redirectToCheckout({ sessionId });
        if (error) {
            console.error('Error during checkout:', error);
        }
    }



    async function fetchHighestBid() {
        try {
            const response = await fetch(`/assignment4/bids/highest/${itemId}`);
            const data = await response.json();
            document.getElementById('highest-bid').textContent = data.bid_amount ? data.bid_amount : 'No bids yet';
        } catch (error) {
            console.error('Failed to fetch highest bid:', error);
        }
    }

    socket.emit('joinItemRoom', itemId, () => {
        socket.join(`item-${itemId}`);
        console.log(`Joined room for item ${itemId}`);
        if (bidForm) {
            fetchHighestBid();
        }

    });

    socket.on('quantityUpdated', (data) => {
        if (data.itemId === itemId) {
            document.getElementById('item-quantity').textContent = data.newQuantity;
        }
    });

    socket.on('newBid', (data) => {
        if (data.itemId === itemId) {
            document.getElementById('highest-bid').textContent = data.bidAmount;
        }
    });

    window.addEventListener('beforeunload', () => {
        socket.emit('leaveItemRoom', itemId);
    });

    socket.on('disconnect', () => {
        console.log('Socket disconnected');
    });
</script>
</body>
</html>
